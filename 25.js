webpackJsonp([25],{778:function(t,s,n){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}function e(t){return E.default.createElement(t.tag,(0,y.default)({},t.attributes,{dangerouslySetInnerHTML:{__html:t.html}}))}function l(t){return E.default.createElement(e,{tag:"section",html:t.html})}function d(t){return E.default.createElement(e,{tag:"style",html:t.style})}var p=n(1),c=a(p),r=n(2),o=a(r),h=n(5),u=a(h),m=n(4),i=a(m),g=n(3),j=a(g),f=n(12),y=a(f),B=n(0),E=a(B),b=n(178),z=function(){return E.default.createElement(b.Button,null,"按钮")}(),_=function(){return E.default.createElement("div",null,E.default.createElement(b.Button,{type:"primary"},"一级按钮"),E.default.createElement(b.Button,{type:"primary",outline:!0},"二级按钮"),E.default.createElement(b.Button,{type:"danger"},"一级按钮"),E.default.createElement(b.Button,{type:"danger",outline:!0},"二级按钮"),E.default.createElement(b.Button,{type:"success"},"一级按钮"),E.default.createElement(b.Button,{type:"success",outline:!0},"二级按钮"),E.default.createElement(b.Button,null,"三级按钮"))}(),k=function(){return E.default.createElement(b.Button,{loading:!0},"Loading")}(),w=function(){return E.default.createElement(b.Button,{disabled:!0},"不可用的按钮")}(),v=function(){return E.default.createElement("div",null,E.default.createElement(b.Button,{size:"large"},"大号按钮"),E.default.createElement(b.Button,null,"正常按钮"),E.default.createElement(b.Button,{size:"small"},"小号按钮"))}(),N=function(){return E.default.createElement(b.Alert,{type:"warning"},E.default.createElement(b.Button,{type:"danger",bordered:!1},"一级按钮"))}(),x=function(){return E.default.createElement("div",null,E.default.createElement(b.Button,{href:"https://youzan.com"},"有赞首页"),E.default.createElement(b.Button,{href:"https://youzan.com",target:"_blank"},"新窗口打开"))}(),M=function(t){function s(){var t,n,a,e;(0,o.default)(this,s);for(var l=arguments.length,d=Array(l),p=0;p<l;p++)d[p]=arguments[p];return n=a=(0,i.default)(this,(t=s.__proto__||(0,c.default)(s)).call.apply(t,[this].concat(d))),a.state={showCode:!0},a.toggle=function(){a.setState({showCode:!a.state.showCode})},e=n,(0,i.default)(a,e)}return(0,j.default)(s,t),(0,u.default)(s,[{key:"render",value:function(){var t=this.state.showCode,s=this.props,n=s.title,a=s.src,l=s.demo;return E.default.createElement("div",{className:"zandoc-react-demo"},E.default.createElement("div",{className:"zandoc-react-demo__preview"},l),E.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},E.default.createElement("i",{className:"zenticon zenticon-right zandoc-react-demo__toggle "+(t?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")}),E.default.createElement(e,{tag:"div",attributes:{className:"zandoc-react-demo__title"},html:n})),t&&E.default.createElement(e,{tag:"pre",html:a,attributes:{className:"zandoc-react-demo__code"}}))}}]),s}(B.Component);t.exports=function(t){function s(){return(0,o.default)(this,s),(0,i.default)(this,(s.__proto__||(0,c.default)(s)).apply(this,arguments))}return(0,j.default)(s,t),(0,u.default)(s,[{key:"render",value:function(){return E.default.createElement("div",{className:"zandoc-react-container "},E.default.createElement(d,{style:""}),E.default.createElement(l,{html:'<h2 id="button -an-niu"><a href="#button%20-an-niu">¶</a>Button 按钮</h2>\n<p>按钮, 提供基础样式及基础状态.</p>\n<h3 id="shi-yong-zhi-nan"><a href="#shi-yong-zhi-nan">¶</a>使用指南</h3>\n<ul>\n<li>通过 <code>type</code> 来控制按钮的样式</li>\n<li>通过 <code>size</code> 控制按钮的大小.</li>\n<li>提供 <code>\'block\'</code>、<code>\'disabled\'</code>、<code>\'loading\'</code> 等修饰状态.</li>\n<li>传入 <code>href/target</code>, Button 将渲染为a标签, 仍然支持以其他属性控制样式及状态.</li>\n</ul>\n<h3 id="dai-ma-yan-shi"><a href="#dai-ma-yan-shi">¶</a>代码演示</h3>'}),E.default.createElement(M,{title:"<p>基础用法</p>",src:'<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>\n  , mountNode\n);',demo:z}),E.default.createElement(M,{title:"<p>风格</p>",src:'<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span>&gt;</span>一级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> <span class="hljs-attr">outline</span>&gt;</span>二级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span>&gt;</span>一级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span> <span class="hljs-attr">outline</span>&gt;</span>二级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span>&gt;</span>一级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"success"</span> <span class="hljs-attr">outline</span>&gt;</span>二级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>三级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  , mountNode\n);',demo:_}),E.default.createElement(M,{title:"<p>正在加载的状态</p>",src:'<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">loading</span>&gt;</span>Loading<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>\n  , mountNode\n);',demo:k}),E.default.createElement(M,{title:"<p>不可用的状态</p>",src:'<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">disabled</span>&gt;</span>不可用的按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span></span>\n  , mountNode\n);',demo:w}),E.default.createElement(M,{title:"<p>按钮大小</p>",src:'<span class="hljs-keyword">import</span> { Button } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"large"</span>&gt;</span>大号按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>&gt;</span>正常按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>&gt;</span>小号按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  , mountNode\n);',demo:v}),E.default.createElement(M,{title:"<p>无边框按钮，一般在背景色比较深的地方使用</p>",src:'<span class="hljs-keyword">import</span> { Button, Alert } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Alert</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"warning"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"danger"</span> <span class="hljs-attr">bordered</span>=<span class="hljs-string">{false}</span>&gt;</span>一级按钮<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Alert</span>&gt;</span></span>\n  , mountNode\n);',demo:N}),E.default.createElement(M,{title:"<p>将按钮变成链接, 只需要提供<code>href</code>属性，并可以通过<code>target</code>属性控制打开方式</p>",src:'<span class="hljs-keyword">import</span> { Button, Alert } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://youzan.com"</span>&gt;</span>有赞首页<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://youzan.com"</span> <span class="hljs-attr">target</span>=<span class="hljs-string">"_blank"</span>&gt;</span>新窗口打开<span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  , mountNode\n);',demo:x}),E.default.createElement(l,{html:"<h3 id=\"api\"><a href=\"#api\">¶</a>API</h3>\n<table class=\"table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>备选值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>风格</td>\n<td>string</td>\n<td><code>'default'</code></td>\n<td><code>'primary'</code>\n、\n<code>'danger'</code>\n、\n<code>'success'</code></td>\n</tr>\n<tr>\n<td>size</td>\n<td>尺寸</td>\n<td>string</td>\n<td><code>'medium'</code></td>\n<td><code>'large'</code>\n、\n<code>'small'</code></td>\n</tr>\n<tr>\n<td>htmlType</td>\n<td>button标签原生type属性</td>\n<td>string</td>\n<td></td>\n<td><code>submit</code>\n、\n<code>reset</code>\n、\n<code>button</code></td>\n</tr>\n<tr>\n<td>block</td>\n<td>是否以块级元素的形式展开</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>状态控制</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>状态控制</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>outline</td>\n<td>边框有颜色，内部没有颜色</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>bordered</td>\n<td>边框透明控制</td>\n<td>bool</td>\n<td><code>true</code></td>\n<td></td>\n</tr>\n<tr>\n<td>其他参数</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>component</td>\n<td>自定义组件标签类型</td>\n<td>string\n|\nfunc</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>href</td>\n<td>可选，如果设置的话会用a标签而不是button</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>target</td>\n<td>可选，和href一起使用，就是a标签的target属性</td>\n<td>string</td>\n<td><code>''</code></td>\n<td><code>'_blank'</code></td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义类名</td>\n<td>string</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>style</td>\n<td>自定style</td>\n<td>object</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>自定义前缀</td>\n<td>string</td>\n<td><code>'zent'</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>"}))}}]),s}(B.Component)}});