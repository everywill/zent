webpackJsonp([9],{793:function(t,e,n){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}function s(t){return y.default.createElement(t.tag,(0,r.default)({},t.attributes,{dangerouslySetInnerHTML:{__html:t.html}}))}function l(t){return y.default.createElement(s,{tag:"section",html:t.html})}function d(t){return y.default.createElement(s,{tag:"style",html:t.style})}var c=n(11),r=a(c),h=n(1),o=a(h),p=n(2),i=a(p),u=n(5),m=a(u),f=n(4),g=a(f),j=n(3),k=a(j),w=n(0),y=a(w),_=n(177),S=function(){var t=function(t){function e(){var t,n,a,s;(0,i.default)(this,e);for(var l=arguments.length,d=Array(l),c=0;c<l;c++)d[c]=arguments[c];return n=a=(0,g.default)(this,(t=e.__proto__||(0,o.default)(e)).call.apply(t,[this].concat(d))),a.state={checked:!0},a.handleChange=function(t){a.setState({checked:t})},s=n,(0,g.default)(a,s)}return(0,k.default)(e,t),(0,m.default)(e,[{key:"render",value:function(){return y.default.createElement(_.Switch,{checked:this.state.checked,onChange:this.handleChange})}}]),e}(y.default.Component);return y.default.createElement(t,null)}(),E=function(){return y.default.createElement("div",null,y.default.createElement(_.Switch,{checked:!0,disabled:!0}),"  ",y.default.createElement(_.Switch,{checked:!1,disabled:!0}))}(),v=function(){return y.default.createElement("div",null,y.default.createElement(_.Switch,{checked:!0}),"  ",y.default.createElement(_.Switch,{size:"small"}))}(),b=function(){return y.default.createElement("div",null,y.default.createElement(_.Switch,{checked:!0,loading:!0}),"  ",y.default.createElement(_.Switch,{loading:!0}))}(),C=function(){var t=function(t){function e(){var t,n,a,s;(0,i.default)(this,e);for(var l=arguments.length,d=Array(l),c=0;c<l;c++)d[c]=arguments[c];return n=a=(0,g.default)(this,(t=e.__proto__||(0,o.default)(e)).call.apply(t,[this].concat(d))),a.state={checked:!0},a.handleChange=function(t){a.setState({checked:t})},s=n,(0,g.default)(a,s)}return(0,k.default)(e,t),(0,m.default)(e,[{key:"render",value:function(){return y.default.createElement(_.Switch,{checked:this.state.checked,onChange:this.handleChange,checkedText:"open",uncheckedText:"close"})}}]),e}(y.default.Component);return y.default.createElement(t,null)}(),z=function(t){function e(){var t,n,a,s;(0,i.default)(this,e);for(var l=arguments.length,d=Array(l),c=0;c<l;c++)d[c]=arguments[c];return n=a=(0,g.default)(this,(t=e.__proto__||(0,o.default)(e)).call.apply(t,[this].concat(d))),a.state={showCode:!0},a.toggle=function(){a.setState({showCode:!a.state.showCode})},s=n,(0,g.default)(a,s)}return(0,k.default)(e,t),(0,m.default)(e,[{key:"render",value:function(){var t=this.state.showCode,e=this.props,n=e.title,a=e.src,l=e.demo;return y.default.createElement("div",{className:"zandoc-react-demo"},y.default.createElement("div",{className:"zandoc-react-demo__preview"},l),y.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},y.default.createElement("i",{className:"zenticon zenticon-right zandoc-react-demo__toggle "+(t?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")}),y.default.createElement(s,{tag:"div",attributes:{className:"zandoc-react-demo__title"},html:n})),t&&y.default.createElement(s,{tag:"pre",html:a,attributes:{className:"zandoc-react-demo__code"}}))}}]),e}(w.Component);t.exports=function(t){function e(){return(0,i.default)(this,e),(0,g.default)(this,(e.__proto__||(0,o.default)(e)).apply(this,arguments))}return(0,k.default)(e,t),(0,m.default)(e,[{key:"render",value:function(){return y.default.createElement("div",{className:"zandoc-react-container "},y.default.createElement(d,{style:""}),y.default.createElement(l,{html:'<h2 id="switch -kai-guan"><a href="#switch%20-kai-guan">¶</a>Switch 开关</h2>\n<p>开关选择器。</p>\n<h3 id="shi-yong-zhi-nan"><a href="#shi-yong-zhi-nan">¶</a>使用指南</h3>\n<ul>\n<li>需要表示开关状态/两种状态之间的切换时。</li>\n<li>切换 <code>Switch</code> 会直接触发状态改变。</li>\n</ul>\n<h3 id="dai-ma-yan-shi"><a href="#dai-ma-yan-shi">¶</a>代码演示</h3>'}),y.default.createElement(z,{title:"<p>基础用法</p>",src:'<span class="hljs-keyword">import</span> { Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Simple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n  state = {\n    <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span>\n  }\n\n  handleChange = <span class="hljs-function">(<span class="hljs-params">checked</span>) =&gt;</span> {\n    <span class="hljs-keyword">this</span>.setState({ checked });\n  }\n\n  render() {\n    <span class="hljs-keyword">return</span> (\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">{this.state.checked}</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{this.handleChange}</span> /&gt;</span>\n    )\n  }\n}\n\nReactDOM.render(\n  <span class="hljs-tag">&lt;<span class="hljs-name">Simple</span> /&gt;</span>\n  , mountNode\n);</span>',demo:S}),y.default.createElement(z,{title:"<p>失效状态</p>",src:'<span class="hljs-keyword">import</span> { Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;Switch checked disabled /&gt;\n    &amp;nbsp;&amp;nbsp;\n    &lt;Switch checked={false} disabled /&gt;\n  &lt;/div&gt;\n  , mountNode\n);',demo:E}),y.default.createElement(z,{title:"<p>开关大小</p>",src:'<span class="hljs-keyword">import</span> { Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;Switch checked /&gt;\n    &amp;nbsp;&amp;nbsp;\n    &lt;Switch size="small" /&gt;\n  &lt;/div&gt;\n  , mountNode\n);',demo:v}),y.default.createElement(z,{title:"<p>开关loading</p>",src:'<span class="hljs-keyword">import</span> { Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n  &lt;div&gt;\n    &lt;Switch checked loading /&gt;\n    &amp;nbsp;&amp;nbsp;\n    &lt;Switch loading /&gt;\n  &lt;/div&gt;\n  , mountNode\n);',demo:b}),y.default.createElement(z,{title:"<p>自定义开关文案</p>",src:'<span class="hljs-keyword">import</span> { Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Simple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n  state = {\n    <span class="hljs-attr">checked</span>: <span class="hljs-literal">true</span>\n  }\n\n  handleChange = <span class="hljs-function">(<span class="hljs-params">checked</span>) =&gt;</span> {\n    <span class="hljs-keyword">this</span>.setState({ checked });\n  }\n\n  render() {\n    <span class="hljs-keyword">return</span> (\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Switch</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">{this.state.checked}</span> <span class="hljs-attr">onChange</span>=<span class="hljs-string">{this.handleChange}</span> <span class="hljs-attr">checkedText</span>=<span class="hljs-string">{</span>\'<span class="hljs-attr">open</span>\'} <span class="hljs-attr">uncheckedText</span>=<span class="hljs-string">{</span>\'<span class="hljs-attr">close</span>\'} /&gt;</span>\n    )\n  }\n}\n\nReactDOM.render(\n  <span class="hljs-tag">&lt;<span class="hljs-name">Simple</span> /&gt;</span>\n  , mountNode\n);</span>',demo:C}),y.default.createElement(l,{html:"<h3 id=\"api\"><a href=\"#api\">¶</a>API</h3>\n<table class=\"table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>备选值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>checked</td>\n<td>指定当前状态</td>\n<td>bool</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>变化时回调函数, 参数是改变后的 \n<code>checked</code>\n 值</td>\n<td>func(checked: bool)</td>\n<td><code>noop</code></td>\n<td></td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>状态控制</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>checkedText</td>\n<td>选中时的文案</td>\n<td>string</td>\n<td><code>'开启'</code></td>\n<td></td>\n</tr>\n<tr>\n<td>uncheckedText</td>\n<td>未选中时的文案</td>\n<td>string</td>\n<td><code>'关闭'</code></td>\n<td></td>\n</tr>\n<tr>\n<td>loading</td>\n<td>加载中状态</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n</tr>\n<tr>\n<td>size</td>\n<td>开关大小</td>\n<td>string</td>\n<td><code>'default'</code></td>\n<td><code>'small'</code></td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义额外类名</td>\n<td>string</td>\n<td><code>''</code></td>\n<td></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>自定义前缀</td>\n<td>string</td>\n<td><code>'zent'</code></td>\n<td></td>\n</tr>\n</tbody>\n</table>"}))}}]),e}(w.Component)}});