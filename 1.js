webpackJsonp([1],{780:function(n,t,s){"use strict";function a(n){return n&&n.__esModule?n:{default:n}}function e(n){return k.default.createElement(n.tag,(0,v.default)({},n.attributes,{dangerouslySetInnerHTML:{__html:n.html}}))}function r(n){return k.default.createElement(e,{tag:"section",html:n.html})}function l(n){return k.default.createElement(e,{tag:"style",html:n.style})}var o=s(1),p=a(o),d=s(2),i=a(d),c=s(5),u=a(c),m=s(4),h=a(m),f=s(3),g=a(f),j=s(12),v=a(j),F=s(803),b=a(F),y=s(15),w=a(y),z=s(822),_=a(z),E=s(0),k=a(E),x=s(126),C=a(x),S=s(177),N=function(){var n=S.Form.Field,t=S.Form.createForm,s=function(n){var t=n.isTouched&&n.error,s=(0,C.default)({"zent-form__control-group":!0,"has-error":t});return k.default.createElement("div",{className:s},k.default.createElement("label",{className:"zent-form__control-label"},"邮箱："),k.default.createElement("div",{className:"zent-form__controls"},k.default.createElement(S.Input,{type:"text",name:n.name,value:n.value,onChange:n.onChange}),t&&k.default.createElement("span",{className:"zent-form__error-desc"},n.error)))},a=function(t){var a=t.zentForm,e=function(){alert((0,_.default)(a.getFormValues()))};return k.default.createElement(S.Form,{horizontal:!0},k.default.createElement(n,{name:"email",component:s,value:"123@youzan.com",validations:{isEmail:!0,limitDomain:function(n,t){return/@youzan\.com$/.test(t)}},validationErrors:{isEmail:"请输入正确的格式",limitDomain:"必须使用youzan.com的邮箱"}}),k.default.createElement("div",{className:"zent-form__form-actions"},k.default.createElement("button",{className:"zent-btn zent-btn-primary",type:"button",onClick:e},"获取表单值")))},e=t()(a);return k.default.createElement(e,null)}(),I=function(){var n=S.Form.Field,t=S.Form.InputField,s=S.Form.createForm,a=function(){return k.default.createElement(S.Form,{horizontal:!0},k.default.createElement(n,{name:"name",type:"text",label:"用户名：",value:"123",component:t,helpDesc:k.default.createElement("span",null,"我是说明",k.default.createElement("a",{href:"https://youzan.com"},"我是链接")),required:!0}))},e=s()(a);return k.default.createElement(e,null)}(),P=function(){var n=S.Form.Field,t=S.Form.InputField,s=S.Form.createForm,a=function(){var s=function(n){return n&&n.toLowerCase()},a=function(n){return n&&n.toUpperCase()};return k.default.createElement(S.Form,{horizontal:!0},k.default.createElement(n,{name:"field1",type:"text",component:t,label:"To Lower:",value:"AAA",normalize:s,format:s}),k.default.createElement(n,{name:"field2",type:"text",component:t,label:"To Upper:",value:"bbb",normalize:a,format:a}))},e=s()(a);return k.default.createElement(e,null)}(),q=function(){var n=S.Form.Field,t=S.Form.createForm,s=S.Select.SelectTrigger,a=[{code:"+86",zh:"zhongguo",eng:"china",value:"中国 +86",index:0},{code:"+853",zh:"aomen",eng:"Macau",value:"中国澳门 +853",index:1}],e=function(n){var t=n.value,a=n.isTouched&&n.error,e=(0,C.default)({"zent-form__control-group":!0,"has-error":a}),r=function(s,a){var e=(0,w.default)({},t,{areacode:a.index});n.onChange(e)},l=function(s){var a=(0,w.default)({},t,{mobile:s.target.value});n.onChange(a)},o=function(n,t){return t&&n.text.trim().toLowerCase().indexOf(t.trim().toLowerCase())>-1};return k.default.createElement("div",{className:e},k.default.createElement("label",{className:"zent-form__control-label"},"联系方式："),k.default.createElement("div",{className:"zent-form__controls"},k.default.createElement(S.Select,{className:"areacode",value:t.areacode,data:n.areadata,filter:o,optionValue:"index",optionText:"value",trigger:s,onChange:r}),k.default.createElement("div",{className:"zent-input-wrapper phone-num",style:{display:"inline-block"}},k.default.createElement("input",{className:"zent-input",type:"text",placeholder:"请填写手机号",value:t.mobile,onChange:l})),a&&k.default.createElement("p",{className:"zent-form__error-desc"},n.error)))},r=function(){return k.default.createElement(S.Form,{horizontal:!0},k.default.createElement(n,{name:"contactPhone",value:{areacode:1,mobile:15899776666},areadata:a,component:e,validations:{validMobile:function(n,t){var s=+t.mobile;return/^\d{1,10}$/.test(s)}},validationErrors:{validMobile:"请输入正确的手机号"}}))},l=t()(r);return k.default.createElement(l,null)}(),V=function(){var n=S.Form.Field,t=S.Form.InputField,s=S.Form.createForm,a=S.Form.SubmissionError,e=function(s){var e=s.handleSubmit,r=s.zentForm,l=r.isSubmitting(),o=function(n,t){return new b.default(function(n){return setTimeout(n,1e3)}).then(function(){if(10*Math.random()>4)throw t.setFieldExternalErrors({user:"用户名已被占用"}),new a("用户名已被占用");return"注册成功"})};return k.default.createElement(S.Form,{onSubmit:e(o),horizontal:!0},k.default.createElement(n,{name:"user",type:"text",component:t,label:"用户名：",value:"111",validations:{required:!0},validationErrors:{required:"用户名不能为空"}}),k.default.createElement(n,{name:"password",type:"password",component:t,label:"密码：",value:"222",validations:{required:!0},validationErrors:{required:"密码不能为空"}}),k.default.createElement(n,{name:"confirmPassword",type:"password",component:t,label:"确认密码：",value:"222",validations:{required:!0,isPasswordEqual:function(n,t){return n.password===t||"两次密码输入不一致"}},validationErrors:{required:"确认密码不能为空"}}),k.default.createElement("div",{className:"zent-form__form-actions"},k.default.createElement("button",{className:"zent-btn zent-btn-primary",type:"submit"},l?"注册中...":"注册")))},r=s()(e),l=function(n){alert(n)},o=function(n){alert(n)};return k.default.createElement(r,{onSubmitFail:l,onSubmitSuccess:o})}(),T=function(){var n=S.Form.Field,t=S.Form.InputField,s=S.Form.createForm,a=function(s){var a=function(n,t){return new b.default(function(n,s){return setTimeout(function(){"pangxie"===t?s("用户名已被占用"):n()},1e3)})};return k.default.createElement(S.Form,{horizontal:!0},k.default.createElement(n,{name:"name",type:"text",label:"用户名：",value:"",validations:{required:!0},validationErrors:{required:"不能为空"},component:t,asyncValidation:a}))},e=s()(a);return k.default.createElement(e,null)}(),M=function(){var n=S.Form.Field,t=S.Form.Fieldset,s=S.Form.InputField,a=S.Form.createForm,e=function(a){return k.default.createElement(S.Form,{horizontal:!0},k.default.createElement(t,{legend:"Fieldset1"},k.default.createElement(n,{name:"name",type:"text",label:"用户名：",value:"",component:s})),k.default.createElement(t,{legend:"Fieldset2"},k.default.createElement(n,{name:"name2",type:"text",label:"用户名2：",value:"",component:s})))},r=a()(e);return k.default.createElement(r,null)}(),A=function(n){function t(){var n,s,a,e;(0,i.default)(this,t);for(var r=arguments.length,l=Array(r),o=0;o<r;o++)l[o]=arguments[o];return s=a=(0,h.default)(this,(n=t.__proto__||(0,p.default)(t)).call.apply(n,[this].concat(l))),a.state={showCode:!0},a.toggle=function(){a.setState({showCode:!a.state.showCode})},e=s,(0,h.default)(a,e)}return(0,g.default)(t,n),(0,u.default)(t,[{key:"render",value:function(){var n=this.state.showCode,t=this.props,s=t.title,a=t.src,r=t.demo;return k.default.createElement("div",{className:"zandoc-react-demo"},k.default.createElement("div",{className:"zandoc-react-demo__preview"},r),k.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},k.default.createElement("i",{className:"zenticon zenticon-right zandoc-react-demo__toggle "+(n?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")}),k.default.createElement(e,{tag:"div",attributes:{className:"zandoc-react-demo__title"},html:s})),n&&k.default.createElement(e,{tag:"pre",html:a,attributes:{className:"zandoc-react-demo__code"}}))}}]),t}(E.Component);n.exports=function(n){function t(){return(0,i.default)(this,t),(0,h.default)(this,(t.__proto__||(0,p.default)(t)).apply(this,arguments))}return(0,g.default)(t,n),(0,u.default)(t,[{key:"render",value:function(){return k.default.createElement("div",{className:"zandoc-react-container "},k.default.createElement(l,{style:""}),k.default.createElement(r,{html:'<h2 id="form -biao-dan-zu-jian"><a href="#form%20-biao-dan-zu-jian">¶</a>Form 表单组件</h2>\n<h3 id="dai-ma-yan-shi"><a href="#dai-ma-yan-shi">¶</a>代码演示</h3>\n<h4 id="ji-chu-yong-fa"><a href="#ji-chu-yong-fa">¶</a>基础用法</h4>\n<p>使用方法具体参考下方示例代码，不过有一些注意点：</p>\n<ol>\n<li>必须要调用 createForm 来包装一下 Form 组件。</li>\n<li>Field 必须要有 name 属性。</li>\n<li>推荐在另外的组件中封装表单结构，然后将组件传入 Field 的 component 属性。</li>\n<li>Field 组件本质上是一个辅助性的组件，本身不提供任何样式。它的作用是管理表单元素 value 值的生命周期和表单元素的 error 等信息。表单元素具体如何展现，是由 Field 组件 component 属性中传入的值所对应的组件决定的。</li>\n<li>validations 对象中传入的不是一个 function 的话，将会调用内部的校验规则（具体参考 API 中的<code>内置 validation rules</code>）。想要自己扩展内部校验规则的话，可以参考 <code>Form.createForm</code> 的 API 。</li>\n<li>validations 对象中传入的是一个 function 的话， function 返回 true 才表示验证通过。</li>\n<li>可以使用 props.zentForm.getFormValues() 来获取所有表单元素值。（ zentForm 如何注入到 props 中请参考 <code>Form.createForm</code> 的 API 。）</li>\n</ol>'}),k.default.createElement(A,{title:"<p>Form 组件已经提供了一个<code>getControlGroup</code>函数来快速得到一个类似例子中 renderEmail 组件的表单结构。具体请参考<code>getControlGroup</code>的 API 。 </p>",src:'<span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">\'classnames\'</span>;\n<span class="hljs-keyword">import</span> { Form, Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, createForm } = Form;\n\n<span class="hljs-keyword">const</span> renderEmail = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> showError = props.isTouched &amp;&amp; props.error;\n  <span class="hljs-keyword">const</span> className = cx({\n    <span class="hljs-string">\'zent-form__control-group\'</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-string">\'has-error\'</span>: showError\n  });\n  <span class="hljs-keyword">return</span> (\n    &lt;div className={className}&gt;\n      &lt;label className="zent-form__control-label"&gt;邮箱：&lt;/label&gt;\n      &lt;div className="zent-form__controls"&gt;\n        &lt;Input type="text" name={props.name} value={props.value} onChange={props.onChange} /&gt;\n        {showError &amp;&amp; &lt;span className="zent-form__error-desc"&gt;{props.error}&lt;/span&gt;}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst BaseForm = (props) =&gt; {\n  const { zentForm } = props;\n  const alertValues = () =&gt; {\n    alert(JSON.stringify(zentForm.getFormValues()));\n  };\n  return (\n      &lt;Form horizontal&gt;\n        &lt;Field \n        \tname="email" \n        \tcomponent={renderEmail} \n        \tvalue="123@youzan.com" \n        \tvalidations={{ \n        \t\tisEmail: true,\n        \t\tlimitDomain(values, value) {\n        \t\t\treturn /@youzan\\.com$/.test(value);\n        \t\t}\n        \t}} \n        \tvalidationErrors={{ \n        \t\tisEmail: \'请输入正确的格式\',\n        \t\tlimitDomain: \'必须使用youzan.com的邮箱\'\n        \t}} \n        /&gt;\n        &lt;div className="zent-form__form-actions"&gt;\n          &lt;button className="zent-btn zent-btn-primary" type="button" onClick={alertValues}&gt;获取表单值&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/Form&gt;\n    );\n};\nconst WrappedForm = createForm()(BaseForm);\n\nReactDOM.render(\n  &lt;WrappedForm /&gt;, mountNode\n);',demo:N}),k.default.createElement(r,{html:'<h4 id="shi-yong-yi-feng-zhuang-de-qi-ta- zent -biao-dan-yuan-su-zu-jian"><a href="#shi-yong-yi-feng-zhuang-de-qi-ta-%20zent%20-biao-dan-yuan-su-zu-jian">¶</a>使用已封装的其他 zent 表单元素组件</h4>\n<p>为了减少代码量， Form 组件内置了对常用的表单元素组件（Input 、Checkbox 、 CheckboxGroup 、RadioGroup 、 Select）的封装。这些组件的封装使用了 getControlGroup 函数（具体查看下方 API ）。</p>'}),k.default.createElement(A,{title:"<p>封装过的组件额外支持的 props，请查看 getControlGroup 的API 。表单元素组件需要的 props 具体请查看对应组件的文档。</p>",src:'<span class="hljs-keyword">import</span> { Form } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, InputField, createForm } = Form;\n\n<span class="hljs-keyword">const</span> FieldForm = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">horizontal</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Field</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>\n        <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">{</span>"用户名："}\n        <span class="hljs-attr">value</span>=<span class="hljs-string">"123"</span>\n        <span class="hljs-attr">component</span>=<span class="hljs-string">{InputField}</span>\n        <span class="hljs-attr">helpDesc</span>=<span class="hljs-string">{</span>&lt;<span class="hljs-attr">span</span>&gt;</span>我是说明<span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://youzan.com"</span>&gt;</span>我是链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>}\n        required\n      /&gt;\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span>\n  );\n};\nconst WrappedForm = createForm()(FieldForm);\n\nReactDOM.render(\n  <span class="hljs-tag">&lt;<span class="hljs-name">WrappedForm</span> /&gt;</span>\n  , mountNode\n)</span>',demo:I}),k.default.createElement(r,{html:'<h4 id="ge-shi-hua- value -zhi"><a href="#ge-shi-hua-%20value%20-zhi">¶</a>格式化 value 值</h4>\n<p>Form 组件提供了 format 和nomalize 来对 value 进行格式化，它们的执行时机可以参考下方使用指南中<code>value 的生命周期</code>。</p>'}),k.default.createElement(A,{title:"<p></p>",src:'<span class="hljs-keyword">import</span> { Form } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, InputField, createForm } = Form;\n\n<span class="hljs-keyword">const</span> FormattedForm = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n  <span class="hljs-keyword">const</span> lower = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> value &amp;&amp; value.toLowerCase();\n  }\n  <span class="hljs-keyword">const</span> upper = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> value &amp;&amp; value.toUpperCase();\n  }\n  <span class="hljs-keyword">return</span> (\n    &lt;Form horizontal&gt;\n      &lt;Field\n        name="field1"\n        type="text"\n        component={InputField}\n        label="To Lower:"\n        value="AAA"\n        normalize={lower}\n        format={lower}\n      /&gt;\n      &lt;Field\n        name="field2"\n        type="text"\n        component={InputField}\n        label="To Upper:"\n        value="bbb"\n        normalize={upper}\n        format={upper}\n      /&gt;\n    &lt;/Form&gt;\n  );\n};\nconst WrappedForm = createForm()(FormattedForm);\n\nReactDOM.render(\n  &lt;WrappedForm /&gt;\n  , mountNode\n)',demo:P}),k.default.createElement(r,{html:'<h4 id="feng-zhuang-duo-ge-biao-dan-zu-jian"><a href="#feng-zhuang-duo-ge-biao-dan-zu-jian">¶</a>封装多个表单组件</h4>\n<p>有时候需要在一个 Field 里封装了两个表单元素，做法就是将两个表单元素的 value 值封装在一个对象里传入到 Field 中。</p>'}),k.default.createElement(A,{title:"<p> </p>",src:'<span class="hljs-keyword">import</span> cx <span class="hljs-keyword">from</span> <span class="hljs-string">\'classnames\'</span>;\n<span class="hljs-keyword">import</span> { Form, Select, Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, createForm } = Form;\n<span class="hljs-keyword">const</span> { SelectTrigger } = Select;\n<span class="hljs-keyword">const</span> countyCodeList = [\n  { <span class="hljs-attr">code</span>: <span class="hljs-string">\'+86\'</span>, <span class="hljs-attr">zh</span>: <span class="hljs-string">\'zhongguo\'</span>, <span class="hljs-attr">eng</span>: <span class="hljs-string">\'china\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'中国 +86\'</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">0</span> },\n  { <span class="hljs-attr">code</span>: <span class="hljs-string">\'+853\'</span>, <span class="hljs-attr">zh</span>: <span class="hljs-string">\'aomen\'</span>, <span class="hljs-attr">eng</span>: <span class="hljs-string">\'Macau\'</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">\'中国澳门 +853\'</span>, <span class="hljs-attr">index</span>: <span class="hljs-number">1</span> }\n];\n\n<span class="hljs-keyword">const</span> ContactPhone = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> value = props.value;\n  <span class="hljs-keyword">const</span> showError = props.isTouched &amp;&amp; props.error;\n  <span class="hljs-keyword">const</span> mobileClassName = cx({\n    <span class="hljs-string">\'zent-form__control-group\'</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-string">\'has-error\'</span>: showError\n  });\n  <span class="hljs-keyword">const</span> onSelectChange = <span class="hljs-function">(<span class="hljs-params">e, selectedItem</span>) =&gt;</span> {\n    <span class="hljs-keyword">const</span> newValue = <span class="hljs-built_in">Object</span>.assign({}, value, {\n      <span class="hljs-attr">areacode</span>: selectedItem.index\n    });\n    props.onChange(newValue);\n  };\n  <span class="hljs-keyword">const</span> onPhoneChange = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n    <span class="hljs-keyword">const</span> newValue = <span class="hljs-built_in">Object</span>.assign({}, value, {\n      <span class="hljs-attr">mobile</span>: e.target.value\n    });\n    props.onChange(newValue);\n  };\n  <span class="hljs-keyword">const</span> filterHandler = <span class="hljs-function">(<span class="hljs-params">item, keyword</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> keyword &amp;&amp; item.text.trim().toLowerCase().indexOf(keyword.trim().toLowerCase()) &gt; <span class="hljs-number">-1</span>;\n  };\n\n  <span class="hljs-keyword">return</span> (\n    &lt;div className={mobileClassName}&gt;\n      &lt;label className="zent-form__control-label"&gt;联系方式：&lt;/label&gt;\n      &lt;div className="zent-form__controls"&gt;\n        &lt;Select className="areacode"\n          value={value.areacode}\n          data={props.areadata}\n          filter={filterHandler}\n          optionValue="index"\n          optionText="value"\n          trigger={SelectTrigger}\n          onChange={onSelectChange}\n        /&gt;\n        &lt;div className="zent-input-wrapper phone-num" style={{ display: \'inline-block\' }}&gt;\n          &lt;input className="zent-input" type="text" placeholder="请填写手机号" value={value.mobile} onChange={onPhoneChange} /&gt;\n        &lt;/div&gt;\n        {showError &amp;&amp; &lt;p className="zent-form__error-desc"&gt;{props.error}&lt;/p&gt;}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst CustomFieldForm = () =&gt; {\n  return (\n      &lt;Form horizontal&gt;\n        &lt;Field\n          name="contactPhone"\n          value={{\n            areacode: 1,\n            mobile: 15899776666\n          }}\n          areadata={countyCodeList}\n          component={ContactPhone}\n          validations={{\n            validMobile(values, value) {\n              let mobile = +value.mobile;\n              let mobileReg = /^\\d{1,10}$/;\n              return mobileReg.test(mobile);\n            }\n          }}\n          validationErrors={{ validMobile: \'请输入正确的手机号\' }}\n        /&gt;\n      &lt;/Form&gt;\n    );\n};\nconst WrappedForm = createForm()(CustomFieldForm);\n\nReactDOM.render(\n  &lt;WrappedForm /&gt;, mountNode\n);',demo:q}),k.default.createElement(r,{html:'<h4 id="biao-dan-ti-jiao"><a href="#biao-dan-ti-jiao">¶</a>表单提交</h4>\n<p>form 组件内部对表单提交的过程进行封装，可以把异步提交的过程封装在一个 func 里并返回一个<strong>promise 对象</strong>，组件内部会根据 promise 对象的执行结果分别调用 <code>onSubmitSuccess</code> 和 <code>onSubmitFail</code> 方法，同时更新内部维护的 <code>isSubmitting</code> 属性（可以通过zentForm.isSubmitting()得到）。</p>'}),k.default.createElement(A,{title:"<p></p>",src:'<span class="hljs-keyword">import</span> { Form } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, InputField, createForm, SubmissionError } = Form;\n\n<span class="hljs-keyword">const</span> SubmitForm = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> { handleSubmit, zentForm } = props;\n  <span class="hljs-keyword">const</span> isSubmitting = zentForm.isSubmitting();\n  <span class="hljs-keyword">const</span> submit = <span class="hljs-function">(<span class="hljs-params">values, zentForm</span>) =&gt;</span> {\n    <span class="hljs-keyword">let</span> promise = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> setTimeout(resolve, <span class="hljs-number">1000</span>));\n    <span class="hljs-keyword">return</span> promise.then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n    \t<span class="hljs-keyword">const</span> random = <span class="hljs-built_in">Math</span>.random() * <span class="hljs-number">10</span>;\n    \t<span class="hljs-keyword">if</span> (random &gt; <span class="hljs-number">4</span>) {\n    \t\tzentForm.setFieldExternalErrors({\n    \t\t  <span class="hljs-attr">user</span>: <span class="hljs-string">\'用户名已被占用\'</span>\n    \t\t});\n    \t\t<span class="hljs-comment">// 可以throw SubmissionError 在 onSubmitFail 中处理，也可以在这里直接 alert 错误信息</span>\n    \t\t<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> SubmissionError(<span class="hljs-string">\'用户名已被占用\'</span>);\n  \t\t} <span class="hljs-keyword">else</span> {\n        <span class="hljs-comment">// 返回值可以传入到 onSubmitSuccess ，或者直接在这里处理掉</span>\n        <span class="hljs-keyword">return</span> <span class="hljs-string">\'注册成功\'</span>;\n  \t\t}\n    });\n  };\n  <span class="hljs-keyword">return</span> (\n    &lt;Form onSubmit={handleSubmit(submit)} horizontal&gt;\n      &lt;Field\n        name="user"\n        type="text"\n        component={InputField}\n        label="用户名："\n        value="111"\n        validations={{ required: true }}\n        validationErrors={{ required: \'用户名不能为空\' }}\n      /&gt;\n      &lt;Field\n        name="password"\n        type="password"\n        component={InputField}\n        label="密码："\n        value="222"\n        validations={{ required: true }}\n        validationErrors={{ required: \'密码不能为空\' }}\n      /&gt;\n      &lt;Field\n        name="confirmPassword"\n        type="password"\n        component={InputField}\n        label="确认密码："\n        value="222"\n        validations={{\n          required: true,\n          isPasswordEqual(values, value) {\n            if (values.password !== value) {\n              return \'两次密码输入不一致\';\n            }\n            return true;\n          }\n        }}\n        validationErrors={{\n          required: \'确认密码不能为空\'\n        }}\n      /&gt;\n      &lt;div className="zent-form__form-actions"&gt;\n        &lt;button className="zent-btn zent-btn-primary" type="submit"&gt;{isSubmitting ? \'注册中...\' : \'注册\'}&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/Form&gt;\n  );\n};\nconst WrappedForm = createForm()(SubmitForm);\nconst onSubmitFail = (error) =&gt; {\n  alert(error);\n}\nconst onSubmitSuccess = (result) =&gt; {\n  alert(result);\n}\n\nReactDOM.render(\n  &lt;WrappedForm onSubmitFail={onSubmitFail} onSubmitSuccess={onSubmitSuccess} /&gt;\n  , mountNode\n)',demo:V}),k.default.createElement(r,{html:'<h4 id="yi-bu-xiao-yan"><a href="#yi-bu-xiao-yan">¶</a>异步校验</h4>\n<p>异步校验在 blur 时触发，如果需要在自定义组件中手动触发异步校验，需要自己调用props.onBlur(event)。 value 值可以直接传给 event ，或者作为 event 的属性传入。</p>'}),k.default.createElement(A,{title:"<p></p>",src:'<span class="hljs-keyword">import</span> { Form } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, InputField, createForm } = Form;\n\n<span class="hljs-keyword">const</span> AsyncForm = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">const</span> asyncValidation = <span class="hljs-function">(<span class="hljs-params">values, value</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n      <span class="hljs-keyword">if</span> (value === <span class="hljs-string">\'pangxie\'</span>) {\n        reject(<span class="hljs-string">\'用户名已被占用\'</span>);\n      } <span class="hljs-keyword">else</span> {\n        resolve();\n      }\n    }, <span class="hljs-number">1000</span>));\n  }\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Form</span> <span class="hljs-attr">horizontal</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Field</span>\n        <span class="hljs-attr">name</span>=<span class="hljs-string">"name"</span>\n        <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span>\n        <span class="hljs-attr">label</span>=<span class="hljs-string">"用户名："</span>\n        <span class="hljs-attr">value</span>=<span class="hljs-string">""</span>\n        <span class="hljs-attr">validations</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">required:</span> <span class="hljs-attr">true</span> }}\n        <span class="hljs-attr">validationErrors</span>=<span class="hljs-string">{{</span> <span class="hljs-attr">required:</span> \'不能为空\' }}\n        <span class="hljs-attr">component</span>=<span class="hljs-string">{InputField}</span>\n        <span class="hljs-attr">asyncValidation</span>=<span class="hljs-string">{asyncValidation}</span>\n      /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">Form</span>&gt;</span>\n  );\n};\nconst WrappedForm = createForm()(AsyncForm);\n\nReactDOM.render(\n  <span class="hljs-tag">&lt;<span class="hljs-name">WrappedForm</span> /&gt;</span>\n  , mountNode\n)</span>',demo:T}),k.default.createElement(r,{html:'<h4 id="fieldset -zu-jian"><a href="#fieldset%20-zu-jian">¶</a>Fieldset 组件</h4>'}),k.default.createElement(A,{title:"<p></p>",src:'<span class="hljs-keyword">import</span> { Form } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n<span class="hljs-keyword">const</span> { Field, Fieldset, InputField, createForm } = Form;\n\n<span class="hljs-keyword">const</span> FieldsetForm = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    &lt;Form horizontal&gt;\n      &lt;Fieldset legend="Fieldset1"&gt;\n        &lt;Field\n          name="name"\n          type="text"\n          label="用户名："\n          value=""\n          component={InputField}\n        /&gt;\n      &lt;/Fieldset&gt;\n      &lt;Fieldset legend="Fieldset2"&gt;\n        &lt;Field\n          name="name2"\n          type="text"\n          label="用户名2："\n          value=""\n          component={InputField}\n        /&gt;\n      &lt;/Fieldset&gt;\n    &lt;/Form&gt;\n  );\n};\nconst WrappedForm = createForm()(FieldsetForm);\n\nReactDOM.render(\n  &lt;WrappedForm /&gt;\n  , mountNode\n)',demo:M}),k.default.createElement(r,{html:'<h3 id="zu-jian-yuan-li"><a href="#zu-jian-yuan-li">¶</a>组件原理</h3>\n<p>本组件核心由以下几部分组成：</p>\n<ul>\n<li>createForm 函数：用来构建一个高阶组件，其中维护了表单中的所有表单元素（Field 组件）实例。通过向子组件的 props 中注入 zentForm 属性来提供表单和表单元素的各种操作方法。</li>\n<li>Form 组件：作为整个表单的最顶层骨架，是对  标签的简单封装，定义了默认的 class 来提供基础样式。</li>\n<li>Field 组件：用来封装各种表单元素组件（如 Input 、 Checkbox 、Select 以及各种自定义组件）的一个高阶组件。其中维护了表单元素 value 值和校验错误等信息。Field 组件会向表单元素组件传入封装过的 onChange 、onBlur 回调和 value 、error 等表单元素需要的 props 。</li>\n</ul>\n<p>具体的使用，请继续看下面的API 说明。</p>\n<h3 id="shi-yong-zhi-nan"><a href="#shi-yong-zhi-nan">¶</a>使用指南</h3>\n<h4 id="feng-zhuang-zi-ding-yi-de-biao-dan-yuan-su-zu-jian"><a href="#feng-zhuang-zi-ding-yi-de-biao-dan-yuan-su-zu-jian">¶</a>封装自定义的表单元素组件</h4>\n<p>前面已经说过，Field 的展示完全由传入到 component 属性中的组件所控制。这个组件能够接收到所有从 Field 传入的 props （包括 Field 中构造的一些隐含的 props ，具体看下方Field API ）。</p>\n<p>对于一些常用的 zent 表单组件， Form 已经使用了一个<code>getControlGroup</code>函数对它们进行了封装（具体参考下方 API ）。如果产品设计上有一些特殊的需求，或者需要封装自定义的组件，也可以直接使用或者参考<code>getControlGroup</code>的方式来对组件进行封装。</p>\n<p><strong>如果需要在一个 Field 中展示多个表单元素，可以将所有的表单元素封装在一个对象中传入 Field 的value 中。具体可以参考“封装自定义组件”那个示例。</strong></p>\n<h4 id="field -zhong- value -de-sheng-ming-zhou-qi"><a href="#field%20-zhong-%20value%20-de-sheng-ming-zhou-qi">¶</a>Field 中 value 的生命周期</h4>\n<p>表单元素的初始值需要通过在 Field 中指定 value 值传入，如果 value 值的生命周期如下图所示：</p>\n<pre><code class="hljs text">Field 中传入 value -> 使用 format() 格式化 value -> format 过的 value 传入 component 中渲染组件\n                           ↑                                 |\n                           |                                 ↓\n                           |                          用户操作改变 value\n                           |                                 |\n                           |                                 ↓\n    normalize 过的 value 写入 form 中维护, 用于数据提交 &#x3C;- 使用 normalize() 格式化 value\n</code></pre>\n<p>如果传入 Field 的 value 值是一个动态值，在外部改变 value 后会重新开始 value 的生命周期。</p>\n<h3 id="api"><a href="#api">¶</a>API</h3>\n<h4 id="form"><a href="#form">¶</a><strong>Form</strong></h4>\n<p>对 html 中 form 元素的一个简单封装, 提供默认的 className.</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>自定义额外类名</td>\n<td>string</td>\n<td><code>\'\'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>自定义前缀</td>\n<td>string</td>\n<td><code>\'zent\'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>horizontal</td>\n<td>水平排列布局</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>inline</td>\n<td>行内排列布局</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onSubmit</td>\n<td>表单提交回调</td>\n<td>func(e:Event)</td>\n<td><code>noop</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>style</td>\n<td>内联样式</td>\n<td>object</td>\n<td>null</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h4 id="form.createform(options)(formc"><a href="#form.createform(options)(formc">¶</a><strong>Form.createForm(options)(FormComponent)</strong></h4>\n<p>使用方式如下：</p>\n<h5 id="options"><a href="#options">¶</a>options</h5>\n<p><code>options</code> 支持的配置项如下:</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>formValidations</td>\n<td>用于添加自定义校验方法, 通过这种方式添加的方法在 validations 中使用时可以传额外的参数</td>\n<td>object</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>PS：项目中的通用校验方法，可以通过在一个文件中定义公共的<code>formValidations</code>对象来引入。</p>\n</blockquote>\n<h5 id="createform -fan-hui-de-zu-jian-ke-jie-shou-de- props"><a href="#createform%20-fan-hui-de-zu-jian-ke-jie-shou-de-%20props">¶</a>createForm 返回的组件可接收的 props</h5>\n<p>createForm 方法构建了一个高阶组件，该组件可以定义了一些额外的 props 。</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>onChange</td>\n<td>任意表单元素修改后触发的回调，参数为所有表单元素值的对象</td>\n<td>func(values: Object)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>onSubmitSuccess</td>\n<td>提交成功后的回调，参数是 submit 函数中 promise 的返回值</td>\n<td>func(submitResult: any)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>onSubmitFail</td>\n<td>提交失败后的回调，参数要么是 SubmissionError 的一个实例，要么是 undefined</td>\n<td>func(submitError: SubmissionError)</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h5 id="zentform prop"><a href="#zentform%20prop">¶</a>zentForm prop</h5>\n<p>经过 <code>ZentForm.createForm</code> 包装的组件通过 props 被添加了 zenForm 属性, 所以在被包装的组件中可以访问到 <code>this.props.zentForm</code> 属性, <code>this.props.zentForm</code> 提供的 API 如下：</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>getFormValues</td>\n<td>获取与 form 绑定的所有表单元素值</td>\n<td>func</td>\n</tr>\n<tr>\n<td>getFieldError</td>\n<td>获取某个 Field 的错误信息, 没有报错信息返回空</td>\n<td>func(name: String)</td>\n</tr>\n<tr>\n<td>setFormPristine</td>\n<td>设置所有 Field 的状态为非原始状态, 用于在提交表单时让 Field 把没有显示出来的错误显示出来</td>\n<td>func(isPristine: Boolean)</td>\n</tr>\n<tr>\n<td>setFieldExternalErrors</td>\n<td>设置外部传入的错误信息（比如服务端校验错误）， errors 的 key 为 Field 的 name ， value 为错误文案</td>\n<td>func(errors: Object)</td>\n</tr>\n<tr>\n<td>resetFieldsValue</td>\n<td>把所有 Field 的值恢复到指定值或初始状态</td>\n<td>func(data: Object)</td>\n</tr>\n<tr>\n<td>isValid</td>\n<td>表单的所有 Field 是否都通过了校验</td>\n<td>func</td>\n</tr>\n<tr>\n<td>isSubmitting</td>\n<td>表单是否正在提交</td>\n<td>func</td>\n</tr>\n<tr>\n<td>isValidating</td>\n<td>表单是否有 Field 在异步校验</td>\n<td>func</td>\n</tr>\n<tr>\n<td>isFieldTouched</td>\n<td>Field 是否变更过值</td>\n<td>func(name: String)</td>\n</tr>\n<tr>\n<td>isFieldValidating</td>\n<td>Field 是否</td>\n<td>func(name: String)</td>\n</tr>\n</tbody>\n</table>\n<h5 id="handlesubmit prop"><a href="#handlesubmit%20prop">¶</a>handleSubmit prop</h5>\n<p>createForm 还会为被包装的组件提供一个封装过的<code>handleSubmit</code>方法，具体使用可以参考上方<strong>表单提交</strong>中的内容</p>\n<p>注意：\n如果希望在<code>onSubmitFail</code>回调中正确的接收到 error 对象，需要在 submit 函数中throw <code>SubmissionError</code>类型的对象</p>\n<pre><code class="hljs js"><span class="hljs-keyword">const</span> { SubmissionError } = Form;\n\nsubmit() {\n  <span class="hljs-comment">// do submit</span>\n  ...\n  throw <span class="hljs-keyword">new</span> SubmissionError(<span class="hljs-string">\'error message\'</span>);\n}\n\nonSubmissionFail(submissionError) {\n  <span class="hljs-keyword">if</span> (submissionError &#x26;&#x26; submissionError.errors === <span class="hljs-string">\'error message\'</span>) {\n    <span class="hljs-comment">// do something</span>\n  }\n}\n</code></pre>\n<h4 id="form.field"><a href="#form.field">¶</a><strong>Form.Field</strong></h4>\n<p>所有需要维护 value 的表单元素组件都需要通过 Field 组件包装一下。\n在 Field 组件上可以传入以下 props ，component 以外的其他 props （包括自定义的 props ），都会传入到 component 中所定义的表单元素组件中：</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>表单元素名</td>\n<td>string</td>\n<td>是</td>\n</tr>\n<tr>\n<td>component</td>\n<td>真正的表单元素组件，负责表单元素如何展示。可以是字符串(标准 html 元素名), 或者 React 组件</td>\n<td>string / React.Component</td>\n<td>是</td>\n</tr>\n<tr>\n<td>normalize</td>\n<td>onChange 或者 onBlur 后格式化表单元素值</td>\n<td>func(value, previousValue, nextValues, previousValues)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>format</td>\n<td>渲染前格式化表单元素值, 不影响真正存储的表单元素值</td>\n<td>func(value, previousValue, nextValues, previousValues)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>value 值修改后的回调，会在 Field 中封装一层。(自定义组件需要自己调用由 Field 组件封装后传入的 \n<code>props.onChange()</code>\n 后才会执行)</td>\n<td>func(event, newValue, previousValue, preventSetValue)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>onBlur</td>\n<td>blur 后的回调（会在 Field 中封装一层）</td>\n<td>func(event, newValue, previousValue, preventSetValue)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>onFocus</td>\n<td>focus 后的回调（会在 Field 中封装一层）</td>\n<td>func(event)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>validations</td>\n<td>定义表单元素校验方法</td>\n<td>object</td>\n<td>否</td>\n</tr>\n<tr>\n<td>validationErrors</td>\n<td>定义表单元素检验方法对应的出错信息</td>\n<td>object</td>\n<td>否</td>\n</tr>\n<tr>\n<td>asyncValidation</td>\n<td>异步校验 func, 需要返回 Promise</td>\n<td>func(values, value)</td>\n<td>否</td>\n</tr>\n<tr>\n<td>value</td>\n<td>表单元素初始值</td>\n<td>any</td>\n<td>是</td>\n</tr>\n</tbody>\n</table>\n<p>除了上述参数之外， Field 组件会隐含地向被包裹的表单元素组件中传入以下 props ：</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>isTouched</td>\n<td>表单元素值被改变过</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>isPristine</td>\n<td>表单元素值没有被改变过</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>isActive</td>\n<td>表单元素为input且获得了焦点</td>\n<td>boolean</td>\n</tr>\n<tr>\n<td>error</td>\n<td>第一个校验错误文本信息（没有报错时为 null ）</td>\n<td>string / Null</td>\n</tr>\n<tr>\n<td>errors</td>\n<td>校验错误文本信息数组（没有错误时为空数组）</td>\n<td>array</td>\n</tr>\n</tbody>\n</table>\n<h5 id=""><a href="#">¶</a></h5>\n<p>获取 Field 对应 component 的实例\n可以通过在Field上加上ref，然后调用 <code>getWrappedComponent</code> 方法来获取。</p>\n<pre><code class="hljs">&#x3C;Field\n  <span class="hljs-keyword">ref</span>={<span class="hljs-keyword">ref</span> => { <span class="hljs-keyword">this</span>.field = <span class="hljs-keyword">ref</span> }}\n  component={XxxComponent}\n  ...\n/>\n\n<span class="hljs-keyword">const</span> component = field.getWrappedComponent();\n</code></pre>\n<h4 id="form.getcontrolgroup"><a href="#form.getcontrolgroup">¶</a><strong>Form.getControlGroup</strong></h4>\n<p>getControlGroup 是一个用来快速封装自定义组件的函数，它返回一个满足通用布局与样式要求（左侧 label 、右侧表单元素）的stateless functional component 。同时支持将 Field 中的 error 信息展示出来。 getControlGroup 实现的比较简单，可以直接看源码。</p>\n<pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> Control => {\n  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ControlGroup</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n    getControlInstance = <span class="hljs-function"><span class="hljs-params">()</span> =></span> {\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.control;\n    }\n\n    render() {\n      <span class="hljs-keyword">const</span> { required = <span class="hljs-literal">false</span>, helpDesc = <span class="hljs-string">\'\'</span>, label = <span class="hljs-string">\'\'</span>, className = <span class="hljs-string">\'\'</span>, ...props } = <span class="hljs-keyword">this</span>.props;\n\n      <span class="hljs-keyword">const</span> showError = props.isTouched &#x26;&#x26; props.error;\n      <span class="hljs-keyword">const</span> groupClassName = cx({\n        <span class="hljs-string">\'zent-form__control-group\'</span>: <span class="hljs-literal">true</span>,\n        <span class="hljs-string">\'zent-form__control-group--active\'</span>: props.isActive,\n        <span class="hljs-string">\'has-error\'</span>: showError,\n        [className]: <span class="hljs-literal">true</span>\n      });\n\n      <span class="hljs-keyword">return</span> (\n        <span class="xml"><span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">{groupClassName}</span>></span>\n          <span class="hljs-tag">&#x3C;<span class="hljs-name">label</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-form__control-label"</span>></span>\n            {required ? <span class="hljs-tag">&#x3C;<span class="hljs-name">em</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-form__required"</span>></span>*<span class="hljs-tag">&#x3C;/<span class="hljs-name">em</span>></span> : null}\n            {label}\n          <span class="hljs-tag">&#x3C;/<span class="hljs-name">label</span>></span>\n          <span class="hljs-tag">&#x3C;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-form__controls"</span>></span>\n            <span class="hljs-tag">&#x3C;<span class="hljs-name">Control</span>\n              {<span class="hljs-attr">...props</span>}\n              <span class="hljs-attr">ref</span>=<span class="hljs-string">{ref</span> =></span> this.control = ref}\n            />\n            {showError &#x26;&#x26; <span class="hljs-tag">&#x3C;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-form__error-desc"</span>></span>{props.error}<span class="hljs-tag">&#x3C;/<span class="hljs-name">p</span>></span>}\n            {helpDesc &#x26;&#x26; <span class="hljs-tag">&#x3C;<span class="hljs-name">p</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-form__help-desc"</span>></span>{helpDesc}<span class="hljs-tag">&#x3C;/<span class="hljs-name">p</span>></span>}\n          <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>\n        <span class="hljs-tag">&#x3C;/<span class="hljs-name">div</span>></span>\n      );\n    }\n  };\n};\n</span></code></pre>\n<p>封装过的组件支持在 Field 上额外传入以下参数：</p>\n<table class="table">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>label</td>\n<td>表单元素的label</td>\n<td>string</td>\n<td>否</td>\n</tr>\n<tr>\n<td>className</td>\n<td>添加到control-group 上的额外类名，可以用来覆盖子元素的样式</td>\n<td>string</td>\n<td>否</td>\n</tr>\n<tr>\n<td>helpDesc</td>\n<td>表单元素的说明性文字</td>\n<td>string</td>\n<td>否</td>\n</tr>\n<tr>\n<td>required</td>\n<td>为 true 时会在 label 前添加红色的"*"</td>\n<td>boolean</td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<h5 id="huo-qu-control-zu-jian-shi-li"><a href="#huo-qu-control-zu-jian-shi-li">¶</a>获取Control组件实例</h5>\n<p>参照上方获取 Field 对应 component 的实例，然后调用 <code>getControlInstance</code> 方法。</p>\n<pre><code class="hljs"><span class="hljs-attribute">const component</span> = field.getWrappedComponent().getControlInstance();\n</code></pre>\n<h4 id="nei-zhi- validation rules"><a href="#nei-zhi-%20validation%20rules">¶</a><strong>内置 validation rules</strong></h4>\n<p>可以直接在 Field 的 validations 属性中使用</p>\n<pre><code class="hljs js">&#x3C;Field\n  ...\n  validations={{\n    <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span>,\n    <span class="hljs-attr">matchRegex</span>: <span class="hljs-regexp">/^\\d+/</span>,\n    <span class="hljs-attr">equals</span>: <span class="hljs-string">\'pangzi\'</span>,\n    <span class="hljs-attr">equalsField</span>: <span class="hljs-string">\'fieldName\'</span>\n  }}\n  ...\n/>\n</code></pre>\n<table class="table">\n<thead>\n<tr>\n<th>规则名</th>\n<th>说明</th>\n<th>可传参数</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>required</td>\n<td>是否必填</td>\n<td>任意，传 true 是为了表意，传其他值也是当作必填，下同</td>\n</tr>\n<tr>\n<td>isExisty</td>\n<td>是否非 null ，非 undefined</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>matchRegex</td>\n<td>是否匹配指定正则表达式</td>\n<td>Regex</td>\n</tr>\n<tr>\n<td>isEmail</td>\n<td>是否邮件类型字符串</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isUrl</td>\n<td>是否 url 类型</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isTrue</td>\n<td>是否true</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isFalse</td>\n<td>是否false</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isNumeric</td>\n<td>是否数字类型</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isInt</td>\n<td>是否整数</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isFloat</td>\n<td>是否小数</td>\n<td>任意</td>\n</tr>\n<tr>\n<td>isLenght</td>\n<td>字符串或数组是否为指定长度</td>\n<td>长度值(Number)</td>\n</tr>\n<tr>\n<td>equals</td>\n<td>是否与指定值相等</td>\n<td>指定值</td>\n</tr>\n<tr>\n<td>equalsField</td>\n<td>是否与表单中的其他元素值相等</td>\n<td>其他 Field 的name(String)</td>\n</tr>\n<tr>\n<td>maxLength</td>\n<td>字符串或数组不能超过指定长度</td>\n<td>长度值(Number)</td>\n</tr>\n<tr>\n<td>minLength</td>\n<td>字符串或数组不能小于指定长度</td>\n<td>长度值(Number)</td>\n</tr>\n</tbody>\n</table>'}))}}]),t}(E.Component)},802:function(n,t,s){var a,e,r,l=s(116),o=s(807),p=s(309),d=s(178),i=s(36),c=i.process,u=i.setImmediate,m=i.clearImmediate,h=i.MessageChannel,f=0,g={},j=function(){var n=+this;if(g.hasOwnProperty(n)){var t=g[n];delete g[n],t()}},v=function(n){j.call(n.data)};u&&m||(u=function(n){for(var t=[],s=1;arguments.length>s;)t.push(arguments[s++]);return g[++f]=function(){o("function"==typeof n?n:Function(n),t)},a(f),f},m=function(n){delete g[n]},"process"==s(117)(c)?a=function(n){c.nextTick(l(j,n,1))}:h?(e=new h,r=e.port2,e.port1.onmessage=v,a=l(r.postMessage,r,1)):i.addEventListener&&"function"==typeof postMessage&&!i.importScripts?(a=function(n){i.postMessage(n+"","*")},i.addEventListener("message",v,!1)):a="onreadystatechange"in d("script")?function(n){p.appendChild(d("script")).onreadystatechange=function(){p.removeChild(this),j.call(n)}}:function(n){setTimeout(l(j,n,1),0)}),n.exports={set:u,clear:m}},803:function(n,t,s){n.exports={default:s(804),__esModule:!0}},804:function(n,t,s){s(314),s(180),s(315),s(812),n.exports=s(24).Promise},805:function(n,t){n.exports=function(n,t,s,a){if(!(n instanceof t)||void 0!==a&&a in n)throw TypeError(s+": incorrect invocation!");return n}},806:function(n,t,s){var a=s(116),e=s(311),r=s(310),l=s(58),o=s(179),p=s(313),d={},i={},t=n.exports=function(n,t,s,c,u){var m,h,f,g,j=u?function(){return n}:p(n),v=a(s,c,t?2:1),F=0;if("function"!=typeof j)throw TypeError(n+" is not iterable!");if(r(j)){for(m=o(n.length);m>F;F++)if((g=t?v(l(h=n[F])[0],h[1]):v(n[F]))===d||g===i)return g}else for(f=j.call(n);!(h=f.next()).done;)if((g=e(f,v,h.value,t))===d||g===i)return g};t.BREAK=d,t.RETURN=i},807:function(n,t){n.exports=function(n,t,s){var a=void 0===s;switch(t.length){case 0:return a?n():n.call(s);case 1:return a?n(t[0]):n.call(s,t[0]);case 2:return a?n(t[0],t[1]):n.call(s,t[0],t[1]);case 3:return a?n(t[0],t[1],t[2]):n.call(s,t[0],t[1],t[2]);case 4:return a?n(t[0],t[1],t[2],t[3]):n.call(s,t[0],t[1],t[2],t[3])}return n.apply(s,t)}},808:function(n,t,s){var a=s(36),e=s(802).set,r=a.MutationObserver||a.WebKitMutationObserver,l=a.process,o=a.Promise,p="process"==s(117)(l);n.exports=function(){var n,t,s,d=function(){var a,e;for(p&&(a=l.domain)&&a.exit();n;){e=n.fn,n=n.next;try{e()}catch(a){throw n?s():t=void 0,a}}t=void 0,a&&a.enter()};if(p)s=function(){l.nextTick(d)};else if(r){var i=!0,c=document.createTextNode("");new r(d).observe(c,{characterData:!0}),s=function(){c.data=i=!i}}else if(o&&o.resolve){var u=o.resolve();s=function(){u.then(d)}}else s=function(){e.call(a,d)};return function(a){var e={fn:a,next:void 0};t&&(t.next=e),n||(n=e,s()),t=e}}},809:function(n,t,s){var a=s(59);n.exports=function(n,t,s){for(var e in t)s&&n[e]?n[e]=t[e]:a(n,e,t[e]);return n}},810:function(n,t,s){"use strict";var a=s(36),e=s(24),r=s(38),l=s(46),o=s(30)("species");n.exports=function(n){var t="function"==typeof e[n]?e[n]:a[n];l&&t&&!t[o]&&r.f(t,o,{configurable:!0,get:function(){return this}})}},811:function(n,t,s){var a=s(58),e=s(307),r=s(30)("species");n.exports=function(n,t){var s,l=a(n).constructor;return void 0===l||void 0==(s=a(l)[r])?t:e(s)}},812:function(n,t,s){"use strict";var a,e,r,l=s(118),o=s(36),p=s(116),d=s(308),i=s(37),c=s(73),u=s(307),m=s(805),h=s(806),f=s(811),g=s(802).set,j=s(808)(),v=o.TypeError,F=o.process,b=o.Promise,F=o.process,y="process"==d(F),w=function(){},z=!!function(){try{var n=b.resolve(1),t=(n.constructor={})[s(30)("species")]=function(n){n(w,w)};return(y||"function"==typeof PromiseRejectionEvent)&&n.then(w)instanceof t}catch(n){}}(),_=function(n,t){return n===t||n===b&&t===r},E=function(n){var t;return!(!c(n)||"function"!=typeof(t=n.then))&&t},k=function(n){return _(b,n)?new x(n):new e(n)},x=e=function(n){var t,s;this.promise=new n(function(n,a){if(void 0!==t||void 0!==s)throw v("Bad Promise constructor");t=n,s=a}),this.resolve=u(t),this.reject=u(s)},C=function(n){try{n()}catch(n){return{error:n}}},S=function(n,t){if(!n._n){n._n=!0;var s=n._c;j(function(){for(var a=n._v,e=1==n._s,r=0;s.length>r;)!function(t){var s,r,l=e?t.ok:t.fail,o=t.resolve,p=t.reject,d=t.domain;try{l?(e||(2==n._h&&P(n),n._h=1),l===!0?s=a:(d&&d.enter(),s=l(a),d&&d.exit()),s===t.promise?p(v("Promise-chain cycle")):(r=E(s))?r.call(s,o,p):o(s)):p(a)}catch(n){p(n)}}(s[r++]);n._c=[],n._n=!1,t&&!n._h&&N(n)})}},N=function(n){g.call(o,function(){var t,s,a,e=n._v;if(I(n)&&(t=C(function(){y?F.emit("unhandledRejection",e,n):(s=o.onunhandledrejection)?s({promise:n,reason:e}):(a=o.console)&&a.error&&a.error("Unhandled promise rejection",e)}),n._h=y||I(n)?2:1),n._a=void 0,t)throw t.error})},I=function(n){if(1==n._h)return!1;for(var t,s=n._a||n._c,a=0;s.length>a;)if(t=s[a++],t.fail||!I(t.promise))return!1;return!0},P=function(n){g.call(o,function(){var t;y?F.emit("rejectionHandled",n):(t=o.onrejectionhandled)&&t({promise:n,reason:n._v})})},q=function(n){var t=this;t._d||(t._d=!0,t=t._w||t,t._v=n,t._s=2,t._a||(t._a=t._c.slice()),S(t,!0))},V=function(n){var t,s=this;if(!s._d){s._d=!0,s=s._w||s;try{if(s===n)throw v("Promise can't be resolved itself");(t=E(n))?j(function(){var a={_w:s,_d:!1};try{t.call(n,p(V,a,1),p(q,a,1))}catch(n){q.call(a,n)}}):(s._v=n,s._s=1,S(s,!1))}catch(n){q.call({_w:s,_d:!1},n)}}};z||(b=function(n){m(this,b,"Promise","_h"),u(n),a.call(this);try{n(p(V,this,1),p(q,this,1))}catch(n){q.call(this,n)}},a=function(n){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1},a.prototype=s(809)(b.prototype,{then:function(n,t){var s=k(f(this,b));return s.ok="function"!=typeof n||n,s.fail="function"==typeof t&&t,s.domain=y?F.domain:void 0,this._c.push(s),this._a&&this._a.push(s),this._s&&S(this,!1),s.promise},catch:function(n){return this.then(void 0,n)}}),x=function(){var n=new a;this.promise=n,this.resolve=p(V,n,1),this.reject=p(q,n,1)}),i(i.G+i.W+i.F*!z,{Promise:b}),s(119)(b,"Promise"),s(810)("Promise"),r=s(24).Promise,i(i.S+i.F*!z,"Promise",{reject:function(n){var t=k(this);return(0,t.reject)(n),t.promise}}),i(i.S+i.F*(l||!z),"Promise",{resolve:function(n){if(n instanceof b&&_(n.constructor,this))return n;var t=k(this);return(0,t.resolve)(n),t.promise}}),i(i.S+i.F*!(z&&s(312)(function(n){b.all(n).catch(w)})),"Promise",{all:function(n){var t=this,s=k(t),a=s.resolve,e=s.reject,r=C(function(){var s=[],r=0,l=1;h(n,!1,function(n){var o=r++,p=!1;s.push(void 0),l++,t.resolve(n).then(function(n){p||(p=!0,s[o]=n,--l||a(s))},e)}),--l||a(s)});return r&&e(r.error),s.promise},race:function(n){var t=this,s=k(t),a=s.reject,e=C(function(){h(n,!1,function(n){t.resolve(n).then(s.resolve,a)})});return e&&a(e.error),s.promise}})},822:function(n,t,s){n.exports={default:s(823),__esModule:!0}},823:function(n,t,s){var a=s(24),e=a.JSON||(a.JSON={stringify:JSON.stringify});n.exports=function(n){return e.stringify.apply(e,arguments)}}});