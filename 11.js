webpackJsonp([11],{794:function(s,a,n){"use strict";function t(s){return s&&s.__esModule?s:{default:s}}function l(s){return k.default.createElement(s.tag,(0,y.default)({},s.attributes,{dangerouslySetInnerHTML:{__html:s.html}}))}function e(s){return k.default.createElement(l,{tag:"section",html:s.html})}function p(s){return k.default.createElement(l,{tag:"style",html:s.style})}var r=n(1),d=t(r),c=n(2),i=t(c),h=n(5),o=t(h),j=n(4),m=t(j),u=n(3),g=t(u),f=n(12),y=t(f),x=n(0),k=t(x),w=n(177),b=function(){var s=w.Select.Option;return k.default.createElement(w.Select,null,k.default.createElement(s,{value:"1"},"选项一"),k.default.createElement(s,{value:"2"},"选项二"),k.default.createElement(s,{value:"3"},"选项三"))}(),S=function(){var s=["选项一","选项二","选项三"];return k.default.createElement(w.Select,{data:s})}(),E=function(){var s=[{value:1,text:"选项一"},{value:2,text:"选项二"},{value:3,text:"选项三"}];return k.default.createElement(w.Select,{data:s})}(),v=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name"})}(),T=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name"})}(),O=function(){function s(s,a){w.Dialog.openDialog({children:"你选择了"+a.name+", 值是"+a.id})}var a=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:a,optionValue:"id",optionText:"name",onChange:s})}(),z=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name",disabled:!0})}(),_=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name",filter:function(s,a){return s.name.indexOf(a)>-1}})}(),N=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name",searchPlaceholder:"Search",filter:function(s,a){return s.name.indexOf(a)>-1}})}(),V=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name",emptyText:"No Result",filter:function(s,a){return s.name.indexOf(a)>-1}})}(),D=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name",search:!0,filter:function(s,a){return s.name.indexOf(a)>-1}})}(),M=function(){var s=[{id:1,name:"选项一"},{id:2,name:"选项二"},{id:3,name:"选项三"}];return k.default.createElement(w.Select,{data:s,optionValue:"id",optionText:"name",tags:!0,filter:function(s,a){return s.name.indexOf(a)>-1}})}(),R=function(s){function a(){var s,n,t,l;(0,i.default)(this,a);for(var e=arguments.length,p=Array(e),r=0;r<e;r++)p[r]=arguments[r];return n=t=(0,m.default)(this,(s=a.__proto__||(0,d.default)(a)).call.apply(s,[this].concat(p))),t.state={showCode:!0},t.toggle=function(){t.setState({showCode:!t.state.showCode})},l=n,(0,m.default)(t,l)}return(0,g.default)(a,s),(0,o.default)(a,[{key:"render",value:function(){var s=this.state.showCode,a=this.props,n=a.title,t=a.src,e=a.demo;return k.default.createElement("div",{className:"zandoc-react-demo"},k.default.createElement("div",{className:"zandoc-react-demo__preview"},e),k.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},k.default.createElement("i",{className:"zenticon zenticon-right zandoc-react-demo__toggle "+(s?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")}),k.default.createElement(l,{tag:"div",attributes:{className:"zandoc-react-demo__title"},html:n})),s&&k.default.createElement(l,{tag:"pre",html:t,attributes:{className:"zandoc-react-demo__code"}}))}}]),a}(x.Component);s.exports=function(s){function a(){return(0,i.default)(this,a),(0,m.default)(this,(a.__proto__||(0,d.default)(a)).apply(this,arguments))}return(0,g.default)(a,s),(0,o.default)(a,[{key:"render",value:function(){return k.default.createElement("div",{className:"zandoc-react-container "},k.default.createElement(p,{style:""}),k.default.createElement(e,{html:'<h2 id="select -xuan-ze-qi"><a href="#select%20-xuan-ze-qi">¶</a>Select 选择器</h2>\n<p>选择器，提供多种选择器功能。</p>\n<h3 id="shi-yong-zhi-nan"><a href="#shi-yong-zhi-nan">¶</a>使用指南</h3>\n<p>组件分层：主要分成 Select, Popup, Trigger 三个模块</p>\n<h4 id="1. select"><a href="#1.%20select">¶</a>1. Select</h4>\n<p>核心控制器，主要职责是格式化数据，负责 Popup 和 Trigger 间的数据传输</p>\n<h4 id="2. popup"><a href="#2.%20popup">¶</a>2. Popup</h4>\n<p>选项列表弹出层，主要负责展示选项，数据过滤控制</p>\n<h4 id="3. trigger"><a href="#3.%20trigger">¶</a>3. Trigger</h4>\n<ul>\n<li>触发器，暴露给使用者，可以通过 trigger 属性进行配置</li>\n<li>核心的 trigger 有 SelectTrigger 和 InputTrigger</li>\n<li>TagsTrigger 是基于 InputTrigger 扩展出来的拥有多选功能的 trigger</li>\n<li>使用者可以自行扩展或开发 trigger</li>\n</ul>\n<h3 id="dai-ma-yan-shi"><a href="#dai-ma-yan-shi">¶</a>代码演示</h3>'}),k.default.createElement(R,{title:"<p>基础用法</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> Option = Select.Option;\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"1"</span>&gt;</span>选项一<span class="hljs-tag">&lt;/<span class="hljs-name">Option</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"2"</span>&gt;</span>选项二<span class="hljs-tag">&lt;/<span class="hljs-name">Option</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">Option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"3"</span>&gt;</span>选项三<span class="hljs-tag">&lt;/<span class="hljs-name">Option</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">Select</span>&gt;</span></span>\n  , mountNode\n);',demo:b}),k.default.createElement(R,{title:"<p>支持数组类型选项</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [<span class="hljs-string">\'选项一\'</span>, <span class="hljs-string">\'选项二\'</span>, <span class="hljs-string">\'选项三\'</span>];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span> /&gt;</span>\n  , mountNode\n);</span>',demo:S}),k.default.createElement(R,{title:"<p>支持对象形式的选项文案与选项值</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">value</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">value</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span> <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span> /&gt;</span>\n  , mountNode\n);</span>',demo:E}),k.default.createElement(R,{title:"<p>支持自定义文案与值对应的key</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n  /&gt;</span>\n  , mountNode\n);</span>',demo:v}),k.default.createElement(R,{title:"<p>支持键盘上下方向键选择选项</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n  /&gt;</span>\n  , mountNode\n);</span>',demo:T}),k.default.createElement(R,{title:"<p>支持选项改变后的回调</p>",src:'<span class="hljs-keyword">import</span> { Select, Dialog } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">showOption</span>(<span class="hljs-params">ev, data</span>) </span>{\n  Dialog.openDialog({\n    <span class="hljs-attr">children</span>: <span class="hljs-string">`你选择了<span class="hljs-subst">${data.name}</span>, 值是<span class="hljs-subst">${data.id}</span>`</span>\n  });\n}\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">onChange</span>=<span class="hljs-string">{showOption}</span>\n  /&gt;</span>\n  , mountNode\n);</span>',demo:O}),k.default.createElement(R,{title:"<p>支持禁用选项组件</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">disabled</span>\n  /&gt;</span>\n  , mountNode\n);</span>',demo:z}),k.default.createElement(R,{title:"<p>支持过滤功能</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">filter</span>=<span class="hljs-string">{(item,</span> <span class="hljs-attr">keyword</span>) =&gt;</span> item.name.indexOf(keyword) &gt; -1}\n  /&gt;\n  , mountNode\n);</span>',demo:_}),k.default.createElement(R,{title:"<p>支持自定义搜索框文案</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">searchPlaceholder</span>=<span class="hljs-string">"Search"</span>\n    <span class="hljs-attr">filter</span>=<span class="hljs-string">{(item,</span> <span class="hljs-attr">keyword</span>) =&gt;</span> item.name.indexOf(keyword) &gt; -1}\n  /&gt;\n  , mountNode\n);</span>',demo:N}),k.default.createElement(R,{title:"<p>支持自定义无选项文案</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">emptyText</span>=<span class="hljs-string">"No Result"</span>\n    <span class="hljs-attr">filter</span>=<span class="hljs-string">{(item,</span> <span class="hljs-attr">keyword</span>) =&gt;</span> item.name.indexOf(keyword) &gt; -1}\n  /&gt;\n  , mountNode\n);</span>',demo:V}),k.default.createElement(R,{title:"<p>支持输入搜索</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">search</span>\n    <span class="hljs-attr">filter</span>=<span class="hljs-string">{(item,</span> <span class="hljs-attr">keyword</span>) =&gt;</span> item.name.indexOf(keyword) &gt; -1}\n  /&gt;\n  , mountNode\n);</span>',demo:D}),k.default.createElement(R,{title:"<p>支持多选标签</p>",src:'<span class="hljs-keyword">import</span> { Select } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> data = [\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项一\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项二\'</span>},\n     {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">\'选项三\'</span>}\n];\n\nReactDOM.render(\n  <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Select</span>\n    <span class="hljs-attr">data</span>=<span class="hljs-string">{data}</span>\n    <span class="hljs-attr">optionValue</span>=<span class="hljs-string">"id"</span>\n    <span class="hljs-attr">optionText</span>=<span class="hljs-string">"name"</span>\n    <span class="hljs-attr">tags</span>\n    <span class="hljs-attr">filter</span>=<span class="hljs-string">{(item,</span> <span class="hljs-attr">keyword</span>) =&gt;</span> item.name.indexOf(keyword) &gt; -1}\n  /&gt;\n  , mountNode\n);</span>',demo:M}),k.default.createElement(e,{html:"<h3 id=\"api\"><a href=\"#api\">¶</a>API</h3>\n<table class=\"table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>data</td>\n<td>选项数据</td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>是</td>\n</tr>\n<tr>\n<td>value</td>\n<td>选中的值，当为tags类型时，可以传入数组</td>\n<td>any</td>\n<td><code>''</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>index</td>\n<td>选中索引</td>\n<td>any</td>\n<td><code>''</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>禁用组件</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>默认提示文案</td>\n<td>string</td>\n<td><code>'请选择'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>searchPlaceholder</td>\n<td>搜索框默认文案</td>\n<td>string</td>\n<td><code>''</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>emptyText</td>\n<td>空列表提示文案</td>\n<td>string</td>\n<td><code>'没有找到匹配项'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>trigger</td>\n<td>自定义触发器</td>\n<td>function</td>\n<td><code>Select.SelectTrigger</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>optionText</td>\n<td>自定义选项显示文案对应的key, 如{ id: 1, name: '文案' }, 设置optionText=\"name\"</td>\n<td>string</td>\n<td><code>'text'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>optionValue</td>\n<td>自定义选项的值对应的key, 如{ id: 1, name: '文案' }, 设置optionValue=\"id\"</td>\n<td>string</td>\n<td><code>'value'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>选择变更后的回调函数</td>\n<td>function</td>\n<td><code>noop</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onDelete</td>\n<td>删除标签后的回调函数</td>\n<td>function</td>\n<td><code>noop</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>filter</td>\n<td>过滤条件，设置以后才会开启过滤功能</td>\n<td>function</td>\n<td><code>null</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onAsyncFilter</td>\n<td>异步设置过滤后的数据</td>\n<td>function</td>\n<td><code>null</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onEmptySelected</td>\n<td>选中过滤条件为空时的回调</td>\n<td>function</td>\n<td><code>noop</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onOpen</td>\n<td>展开时的回调</td>\n<td>function</td>\n<td><code>noop</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义额外类名</td>\n<td>string</td>\n<td><code>''</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>自定义前缀</td>\n<td>string</td>\n<td><code>'zent'</code></td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p><code>如果 data 和 children 两种方式同时使用，data 会将 children 覆盖，主要是为了可以接收异步数据直接改变 data 属性来改变选项。</code></p>\n<h3 id=\"trigger-kai-fa-api\"><a href=\"#trigger-kai-fa-api\">¶</a>Trigger开发API</h3>\n<table class=\"table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>selectedItems</td>\n<td>已选择的条目</td>\n<td>array</td>\n<td><code>[]</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>extraFilter</td>\n<td>是否自带过滤功能</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>open</td>\n<td>是否打开Popup</td>\n<td>boolean</td>\n<td><code>false</code></td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p><code>Trigger 可以通过调用 this.props.onChange({...}) 通过改变 Popup 的 props 实现参数传递。</code></p>"}))}}]),a}(x.Component)}});