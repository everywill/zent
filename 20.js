webpackJsonp([20],{782:function(t,n,e){"use strict";function a(t){return t&&t.__esModule?t:{default:t}}function s(t){return w.default.createElement(t.tag,(0,o.default)({},t.attributes,{dangerouslySetInnerHTML:{__html:t.html}}))}function d(t){return w.default.createElement(s,{tag:"section",html:t.html})}function l(t){return w.default.createElement(s,{tag:"style",html:t.style})}var r=e(12),o=a(r),p=e(1),c=a(p),u=e(2),i=a(u),h=e(5),f=a(h),m=e(4),g=a(m),y=e(3),E=a(y),j=e(0),w=a(j),v=e(177),k=function(){return w.default.createElement("div",null,w.default.createElement(v.Input,{placeholder:"Please input your name",autoFocus:!0}),w.default.createElement(v.Input,{type:"password",placeholder:"Please input your password"}))}(),_=function(){return w.default.createElement("div",null,w.default.createElement(v.Input,{addonBefore:"$"}),w.default.createElement(v.Input,{addonAfter:"%"}),w.default.createElement(v.Input,{addonBefore:"Buy",addonAfter:"Apple"}))}(),I=function(){return w.default.createElement("div",null,w.default.createElement(v.Input,{type:"textarea"}))}(),z=function(){var t=function(t){function n(){(0,i.default)(this,n);var t=(0,g.default)(this,(n.__proto__||(0,c.default)(n)).call(this));return t.onPressEnter=function(n){t.addLog("enter pressed")},t.onKeyDown=function(n){t.addLog("key down")},t.state={logs:[]},t}return(0,E.default)(n,t),(0,f.default)(n,[{key:"addLog",value:function(t){var n=this.state.logs;n.push(t),this.setState({logs:n})}},{key:"render",value:function(){return w.default.createElement("div",null,w.default.createElement(v.Input,{onPressEnter:this.onPressEnter,placeholder:"press enter"}),w.default.createElement(v.Input,{onKeyDown:this.onKeyDown,placeholder:"key down"}),w.default.createElement("div",null,this.state.logs.map(function(t,n){return w.default.createElement("p",{key:n},t)})))}}]),n}(w.default.Component);return w.default.createElement(t,null)}(),b=function(t){function n(){var t,e,a,s;(0,i.default)(this,n);for(var d=arguments.length,l=Array(d),r=0;r<d;r++)l[r]=arguments[r];return e=a=(0,g.default)(this,(t=n.__proto__||(0,c.default)(n)).call.apply(t,[this].concat(l))),a.state={showCode:!0},a.toggle=function(){a.setState({showCode:!a.state.showCode})},s=e,(0,g.default)(a,s)}return(0,E.default)(n,t),(0,f.default)(n,[{key:"render",value:function(){var t=this.state.showCode,n=this.props,e=n.title,a=n.src,d=n.demo;return w.default.createElement("div",{className:"zandoc-react-demo"},w.default.createElement("div",{className:"zandoc-react-demo__preview"},d),w.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},w.default.createElement("i",{className:"zenticon zenticon-right zandoc-react-demo__toggle "+(t?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")}),w.default.createElement(s,{tag:"div",attributes:{className:"zandoc-react-demo__title"},html:e})),t&&w.default.createElement(s,{tag:"pre",html:a,attributes:{className:"zandoc-react-demo__code"}}))}}]),n}(j.Component);t.exports=function(t){function n(){return(0,i.default)(this,n),(0,g.default)(this,(n.__proto__||(0,c.default)(n)).apply(this,arguments))}return(0,E.default)(n,t),(0,f.default)(n,[{key:"render",value:function(){return w.default.createElement("div",{className:"zandoc-react-container "},w.default.createElement(l,{style:".zent-input-wrapper {\n    width: 200px;\n    margin-bottom: 20px;\n}"}),w.default.createElement(d,{html:'<h2 id="input -shu-ru-kuang"><a href="#input%20-shu-ru-kuang">¶</a>Input 输入框</h2>\n<p>表单的输入组件，对原生input的包装，通过鼠标或键盘输入内容。</p>\n<h3 id="shi-yong-zhi-nan"><a href="#shi-yong-zhi-nan">¶</a>使用指南</h3>\n<ul>\n<li>在表单输入时使用，可带前缀或后缀。</li>\n<li>可与其它组件组合使用，如组合成一个搜索输入框</li>\n</ul>\n<h3 id="dai-ma-yan-shi"><a href="#dai-ma-yan-shi">¶</a>代码演示</h3>'}),w.default.createElement(b,{title:"<p>基础用法</p>",src:'<span class="hljs-keyword">import</span> { Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n    &lt;div&gt;\n        &lt;Input placeholder="Please input your name" autoFocus /&gt;\n        &lt;Input type="password" placeholder="Please input your password" /&gt;\n    &lt;/div&gt;\n    , mountNode\n);',demo:k}),w.default.createElement(b,{title:"<p>带前后缀的输入框</p>",src:'<span class="hljs-keyword">import</span> { Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n    &lt;div&gt;\n        &lt;Input addonBefore="$" /&gt;\n        &lt;Input addonAfter="%" /&gt;\n        &lt;Input addonBefore="Buy" addonAfter="Apple" /&gt;\n    &lt;/div&gt;\n    , mountNode\n);',demo:_}),w.default.createElement(b,{title:"<p>textarea输入框</p>",src:'<span class="hljs-keyword">import</span> { Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"textarea"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    , mountNode\n);</span>',demo:I}),w.default.createElement(b,{title:"<p>事件处理</p>",src:'<span class="hljs-keyword">import</span> { Input } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EventTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">super</span>();\n        <span class="hljs-keyword">this</span>.state = {\n            <span class="hljs-attr">logs</span>: []\n        }\n    }\n    onPressEnter = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n        <span class="hljs-keyword">this</span>.addLog(<span class="hljs-string">\'enter pressed\'</span>);\n    }\n\n    onKeyDown = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> {\n        <span class="hljs-keyword">this</span>.addLog(<span class="hljs-string">\'key down\'</span>);\n    }\n\n    addLog(msg) {\n        <span class="hljs-keyword">const</span> { logs } = <span class="hljs-keyword">this</span>.state;\n        logs.push(msg)\n        <span class="hljs-keyword">this</span>.setState({logs})\n    }\n\n    render() {\n        <span class="hljs-keyword">return</span> (\n            &lt;div&gt;\n                &lt;Input onPressEnter={this.onPressEnter} placeholder="press enter"/&gt;\n                &lt;Input onKeyDown={this.onKeyDown} placeholder="key down"/&gt;\n                &lt;div&gt;{this.state.logs.map((log, index) =&gt; &lt;p key={index}&gt;{log}&lt;/p&gt;)}&lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n\nReactDOM.render(\n    &lt;EventTest /&gt;\n    , mountNode\n);',demo:z}),w.default.createElement(d,{html:"<h3 id=\"api\"><a href=\"#api\">¶</a>API</h3>\n<table class=\"table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n<th>备选值</th>\n<th>是否必填</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>className</td>\n<td>自定义额外类名</td>\n<td>string</td>\n<td><code>''</code></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>自定义类前缀</td>\n<td>string</td>\n<td><code>'zent'</code></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>type</td>\n<td>自定义类前缀</td>\n<td>string</td>\n<td><code>'text'</code></td>\n<td><code>'number'</code>\n、\n<code>'password'</code>\n、\n<code>'textarea'</code></td>\n<td>否</td>\n</tr>\n<tr>\n<td>defaultValue</td>\n<td>默认值</td>\n<td>string</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>value</td>\n<td>输入值</td>\n<td>string</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>readOnly</td>\n<td>是否只读</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>disabled</td>\n<td>是否禁用</td>\n<td>bool</td>\n<td><code>false</code></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>placeholder</td>\n<td>原生placeholder文案</td>\n<td>string</td>\n<td><code>''</code></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>addonBefore</td>\n<td>前置标签</td>\n<td>node</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>addonAfter</td>\n<td>后置标签</td>\n<td>node</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>autoFocus</td>\n<td>自动focus</td>\n<td>bool</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onChange</td>\n<td>change事件</td>\n<td>func(e:Event)</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n<tr>\n<td>onPressEnter</td>\n<td>回车事件</td>\n<td>func(e:Event)</td>\n<td></td>\n<td></td>\n<td>否</td>\n</tr>\n</tbody>\n</table>\n<p><em>除了以上属性外，所有react支持的input属性，Input组件都支持</em></p>\n<h4 id=\"focus\"><a href=\"#focus\">¶</a>focus</h4>\n<p><code>focus(): function</code></p>\n<p>手动聚焦到输入框</p>"}))}}]),n}(j.Component)}});