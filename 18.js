webpackJsonp([18],{786:function(n,a,s){"use strict";function t(n){return n&&n.__esModule?n:{default:n}}function e(n){return v.default.createElement(n.tag,(0,o.default)({},n.attributes,{dangerouslySetInnerHTML:{__html:n.html}}))}function l(n){return v.default.createElement(e,{tag:"section",html:n.html})}function d(n){return v.default.createElement(e,{tag:"style",html:n.style})}var c=s(12),o=t(c),p=s(1),r=t(p),i=s(2),h=t(i),u=s(5),g=t(u),m=s(4),f=t(m),j=s(3),w=t(j),y=s(0),v=t(y),E=s(178),_=function(){return v.default.createElement(E.Loading,{show:!0})}(),z=function(){var n=function(n){function a(){var n,s,t,e;(0,h.default)(this,a);for(var l=arguments.length,d=Array(l),c=0;c<l;c++)d[c]=arguments[c];return s=t=(0,f.default)(this,(n=a.__proto__||(0,r.default)(a)).call.apply(n,[this].concat(d))),t.state={loading:!1},t.onChange=function(n){t.setState({loading:n})},e=s,(0,f.default)(t,e)}return(0,w.default)(a,n),(0,g.default)(a,[{key:"render",value:function(){var n=this.state.loading;return v.default.createElement("div",null,v.default.createElement(E.Loading,{show:n},v.default.createElement("div",{className:"zent-loading-example-hello-world"},"Hello World")),v.default.createElement(E.Switch,{className:"zent-loading-example-switch",checked:n,onChange:this.onChange,size:"small"}))}}]),a}(v.default.Component);return v.default.createElement(n,null)}(),k=function(){var n=function(){return v.default.createElement("div",null,v.default.createElement(E.Button,{onClick:function(){E.Loading.on()}},"全局开启"),v.default.createElement(E.Button,{onClick:function(){E.Loading.off()},style:{zIndex:9999,position:"relative"}},"全局关闭"))};return v.default.createElement(n,null)}(),x=function(n){function a(){var n,s,t,e;(0,h.default)(this,a);for(var l=arguments.length,d=Array(l),c=0;c<l;c++)d[c]=arguments[c];return s=t=(0,f.default)(this,(n=a.__proto__||(0,r.default)(a)).call.apply(n,[this].concat(d))),t.state={showCode:!0},t.toggle=function(){t.setState({showCode:!t.state.showCode})},e=s,(0,f.default)(t,e)}return(0,w.default)(a,n),(0,g.default)(a,[{key:"render",value:function(){var n=this.state.showCode,a=this.props,s=a.title,t=a.src,l=a.demo;return v.default.createElement("div",{className:"zandoc-react-demo"},v.default.createElement("div",{className:"zandoc-react-demo__preview"},l),v.default.createElement("div",{className:"zandoc-react-demo__bottom",onClick:this.toggle},v.default.createElement("i",{className:"zenticon zenticon-right zandoc-react-demo__toggle "+(n?"zandoc-react-demo__toggle-on":"zandoc-react-demo__toggle-off")}),v.default.createElement(e,{tag:"div",attributes:{className:"zandoc-react-demo__title"},html:s})),n&&v.default.createElement(e,{tag:"pre",html:t,attributes:{className:"zandoc-react-demo__code"}}))}}]),a}(y.Component);n.exports=function(n){function a(){return(0,h.default)(this,a),(0,f.default)(this,(a.__proto__||(0,r.default)(a)).apply(this,arguments))}return(0,w.default)(a,n),(0,g.default)(a,[{key:"render",value:function(){return v.default.createElement("div",{className:"zandoc-react-container "},v.default.createElement(d,{style:".zent-loading-example-switch {\n\tmargin-top: 10px;\n}\n\n.zent-loading-example-hello-world {\n\tbackground-color: #e5e5e5;\n\ttext-align: center;\n\theight: 160px;\n\tline-height: 160px;\n}"}),v.default.createElement(l,{html:'<h2 id="loading -deng-dai"><a href="#loading%20-deng-dai">¶</a>Loading 等待</h2>\n<p>等待，用于页面或者区块的等待状态。</p>\n<h3 id="shi-yong-zhi-nan"><a href="#shi-yong-zhi-nan">¶</a>使用指南</h3>\n<ul>\n<li>当页面处于渲染中或者加载异步数据时，可以使用此组件减少用户等待时的焦虑感。</li>\n</ul>\n<h3 id="dai-ma-yan-shi"><a href="#dai-ma-yan-shi">¶</a>代码演示</h3>'}),v.default.createElement(x,{title:"<p>基础用法</p>",src:'<span class="hljs-keyword">import</span> { Loading } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\nReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> <span class="hljs-attr">show</span> /&gt;</span>, mountNode);</span>',demo:_}),v.default.createElement(x,{title:"<p>使用 Loading 包裹组件，使其进入 Loading 状态。</p>",src:'<span class="hljs-keyword">import</span> { Loading, Switch } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n  state = { <span class="hljs-attr">loading</span>: <span class="hljs-literal">false</span> }\n\n  onChange = <span class="hljs-function">(<span class="hljs-params">value</span>) =&gt;</span> {\n    <span class="hljs-keyword">this</span>.setState({ <span class="hljs-attr">loading</span>: value });\n  }\n\n  render() {\n    <span class="hljs-keyword">const</span> { loading } = <span class="hljs-keyword">this</span>.state;\n\n    <span class="hljs-keyword">return</span> (\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Loading</span> <span class="hljs-attr">show</span>=<span class="hljs-string">{loading}</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-loading-example-hello-world"</span>&gt;</span>Hello World<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">Loading</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">Switch</span>\n          <span class="hljs-attr">className</span>=<span class="hljs-string">"zent-loading-example-switch"</span>\n          <span class="hljs-attr">checked</span>=<span class="hljs-string">{loading}</span>\n          <span class="hljs-attr">onChange</span>=<span class="hljs-string">{this.onChange}</span>\n          <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span>\n        /&gt;</span>\n      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n    );\n  }\n}\n\nReactDOM.render(<span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span>, mountNode);</span>',demo:z}),v.default.createElement(x,{title:"<p>全局开启或关闭。</p>",src:'<span class="hljs-keyword">import</span> { Loading, Button } <span class="hljs-keyword">from</span> <span class="hljs-string">\'zent\'</span>;\n\n<span class="hljs-keyword">const</span> Example = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> { Loading.on() }}&gt;\n        全局开启\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span>\n        <span class="hljs-attr">onClick</span>=<span class="hljs-string">{()</span> =&gt;</span> { Loading.off() }}\n        style={{ zIndex: 9999, position: \'relative\' }}\n      &gt;\n        全局关闭\n      <span class="hljs-tag">&lt;/<span class="hljs-name">Button</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n  );\n}\n\nReactDOM.render(<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Example</span> /&gt;</span>, mountNode);</span>',demo:k}),v.default.createElement(l,{html:"<h3 id=\"api\"><a href=\"#api\">¶</a>API</h3>\n<table class=\"table\">\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n<th>类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>show</td>\n<td>显示控制</td>\n<td>bool</td>\n<td><code>false</code></td>\n</tr>\n<tr>\n<td>static</td>\n<td>是否以标签形式存在于文档流中</td>\n<td>bool</td>\n<td><code>true</code></td>\n</tr>\n<tr>\n<td>height</td>\n<td>设置 static 为 true 情况下，设置高度，如果包裹了组件，将会表现为组件高度，否则将会使用默认高度</td>\n<td>number</td>\n<td><code>160</code></td>\n</tr>\n<tr>\n<td>zIndex</td>\n<td>设置 z-index</td>\n<td>number</td>\n<td><code>9998</code></td>\n</tr>\n<tr>\n<td>className</td>\n<td>自定义额外类名</td>\n<td>string</td>\n<td><code>''</code></td>\n</tr>\n<tr>\n<td>containerClass</td>\n<td>自定义额外类名，外部包裹的容器使用</td>\n<td>string</td>\n<td><code>''</code></td>\n</tr>\n<tr>\n<td>prefix</td>\n<td>自定义前缀</td>\n<td>string</td>\n<td><code>'zent'</code></td>\n</tr>\n</tbody>\n</table>"}))}}]),a}(y.Component)}});